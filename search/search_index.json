{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Design & Code Snippets We will be covering the following topics Design Patterns Algorithms Python Swift Machine Learning","title":"Home"},{"location":"#design-code-snippets","text":"We will be covering the following topics Design Patterns Algorithms Python Swift Machine Learning","title":"Design &amp; Code Snippets"},{"location":"datastructures/","text":"Data Structures Stack Stack is one of the simplest data structures. Stack has LIFO - Last In first out order Stack is like an array but with limited functionality Push to add a new object to the top Pop to remove the last object top to look at the top most/last element without removing it Swift - Stack Implementation Tree Tree is a simple data structure used to represent hierarchies such as Org Hierarchy Class Hierarchy Family Tree etc Swift - Tree Implementation","title":"Data Structures"},{"location":"datastructures/#data-structures","text":"","title":"Data Structures"},{"location":"datastructures/#stack","text":"Stack is one of the simplest data structures. Stack has LIFO - Last In first out order Stack is like an array but with limited functionality Push to add a new object to the top Pop to remove the last object top to look at the top most/last element without removing it Swift - Stack Implementation","title":"Stack"},{"location":"datastructures/#tree","text":"Tree is a simple data structure used to represent hierarchies such as Org Hierarchy Class Hierarchy Family Tree etc Swift - Tree Implementation","title":"Tree"},{"location":"Swift/Swift/","text":"Cocoa / Swift User Interface Elements NSTableView NSOutlineView NSCollectionView Swift CALayer .","title":"Cocoa/Swift"},{"location":"Swift/Swift/#cocoa-swift","text":"","title":"Cocoa / Swift"},{"location":"Swift/Swift/#user-interface-elements","text":"NSTableView NSOutlineView NSCollectionView Swift CALayer .","title":"User Interface Elements"},{"location":"Swift/Swift_CALayer/","text":"CALayers in Swift","title":"CALayers in Swift"},{"location":"Swift/Swift_CALayer/#calayers-in-swift","text":"","title":"CALayers in Swift"},{"location":"datastructure/Stack/","text":"Stack is one of the simplest data structures. Stack has LIFO - Last In first out order Stack is like an array but with limited functionality Push to add a new object to the top Pop to remove the last object top to look at the top most/last element without removing it import Cocoa //Here the stack is created as a wrapper around a swift array that allows push an object to the stack, //pop the last object and look at the top element of the stack public struct Stack < T > { fileprivate var array = [ T ]() public var isEmpty : Bool { return array . isEmpty } public var count : Int { return array . count } public mutating func push ( _ element : T ){ array . append ( element ) } public mutating func pop () -> T ?{ return array . popLast () } public var top : T ? { return array . last } } Testing the stack implementation var stack = Stack < Int >() stack . push ( 10 ) print ( stack ) //Stack<Int>(array: [10]) stack . push ( 20 ) print ( stack ) //Stack<Int>(array: [10, 20]) stack . push ( 30 ) print ( stack ) //Stack<Int>(array: [10, 20, 30]) if let val = stack . pop (){ print ( \"The popped item = \\( val ) \" ) //The popped item = 30 } print ( stack ) //Stack<Int>(array: [10, 20]) if let topElement = stack . top { print ( \"The Top Element is = \\( topElement ) \" ) } //The Top Element is = 20 print ( stack ) //Stack<Int>(array: [10, 20]) //The pop removes the last element however the top only looks at the last element without removing it.","title":"Stack"},{"location":"datastructure/Tree/","text":"Tree Datastructure implementation in Swift import Cocoa class Node { var value : String = \"\" var children : [ Node ] = [] weak var parent : Node ? init ( value : String ) { self . value = value } func addChild ( child : Node ){ self . children . append ( child ) child . parent = self } func search ( value : String ) -> Node ?{ if value == self . value { return self } for child in self . children { if let foundObj = child . search ( value : value ){ return foundObj } } return nil } } extension Node : CustomStringConvertible { var description : String { var text = \" \\( value ) \" if ! children . isEmpty { text = text + \" \\n\\t Children = {\" for child in children { text = text + child . description + \",\" } text = text + \"} \" } return text } } Lets create some nodes and create a family tree structure let starks = Node ( value : \"Rickard Stark\" ) let s1 = Node ( value : \"Eddard Stark\" ) let s2 = Node ( value : \"Brandon Stark\" ) let s3 = Node ( value : \"Benjen Stark\" ) let c1 = Node ( value : \"Robb Stark\" ) let c2 = Node ( value : \"Sansa Stark\" ) let c3 = Node ( value : \"Arya Stark\" ) let c4 = Node ( value : \"Brandon Stark\" ) let c5 = Node ( value : \"Rickon Stark\" ) s1 . children = [ c1 , c2 , c3 , c4 , c5 ] starks . addChild ( child : s1 ) starks . addChild ( child : s2 ) starks . addChild ( child : s3 ) Lets print the entire family tree for Rickard Stark print ( starks ) Rickard Stark Children = { Eddard Stark Children = { Robb Stark , Sansa Stark , Arya Stark , Brandon Stark , Rickon Stark ,} , Brandon Stark , Benjen Stark ,} Lets print the entire family tree for Eddard Stark print ( s1 ) Eddard Stark Children = { Robb Stark , Sansa Stark , Arya Stark , Brandon Stark , Rickon Stark ,} Below we are checking if Arya Stark exists in the family tree of starks if let aryaStark = starks . search ( value : \"Arya Stark\" ) { print ( \"Found \\( aryaStark ) \" ) } else { print ( \"Not able to find Arya Stark\" ) } /* Found Arya Stark */ Lets check if John Snow belongs to the Stark family if let johnsnow = starks . search ( value : \"John Snow\" ) { print ( \"Found \\( johnsnow ) \" ) } else { print ( \"Not able to find John Snow\" ) } //Not able to find John Snow","title":"Tree Datastructure implementation in Swift"},{"location":"datastructure/Tree/#tree-datastructure-implementation-in-swift","text":"import Cocoa class Node { var value : String = \"\" var children : [ Node ] = [] weak var parent : Node ? init ( value : String ) { self . value = value } func addChild ( child : Node ){ self . children . append ( child ) child . parent = self } func search ( value : String ) -> Node ?{ if value == self . value { return self } for child in self . children { if let foundObj = child . search ( value : value ){ return foundObj } } return nil } } extension Node : CustomStringConvertible { var description : String { var text = \" \\( value ) \" if ! children . isEmpty { text = text + \" \\n\\t Children = {\" for child in children { text = text + child . description + \",\" } text = text + \"} \" } return text } } Lets create some nodes and create a family tree structure let starks = Node ( value : \"Rickard Stark\" ) let s1 = Node ( value : \"Eddard Stark\" ) let s2 = Node ( value : \"Brandon Stark\" ) let s3 = Node ( value : \"Benjen Stark\" ) let c1 = Node ( value : \"Robb Stark\" ) let c2 = Node ( value : \"Sansa Stark\" ) let c3 = Node ( value : \"Arya Stark\" ) let c4 = Node ( value : \"Brandon Stark\" ) let c5 = Node ( value : \"Rickon Stark\" ) s1 . children = [ c1 , c2 , c3 , c4 , c5 ] starks . addChild ( child : s1 ) starks . addChild ( child : s2 ) starks . addChild ( child : s3 ) Lets print the entire family tree for Rickard Stark print ( starks ) Rickard Stark Children = { Eddard Stark Children = { Robb Stark , Sansa Stark , Arya Stark , Brandon Stark , Rickon Stark ,} , Brandon Stark , Benjen Stark ,} Lets print the entire family tree for Eddard Stark print ( s1 ) Eddard Stark Children = { Robb Stark , Sansa Stark , Arya Stark , Brandon Stark , Rickon Stark ,} Below we are checking if Arya Stark exists in the family tree of starks if let aryaStark = starks . search ( value : \"Arya Stark\" ) { print ( \"Found \\( aryaStark ) \" ) } else { print ( \"Not able to find Arya Stark\" ) } /* Found Arya Stark */ Lets check if John Snow belongs to the Stark family if let johnsnow = starks . search ( value : \"John Snow\" ) { print ( \"Found \\( johnsnow ) \" ) } else { print ( \"Not able to find John Snow\" ) } //Not able to find John Snow","title":"Tree Datastructure implementation in Swift"}]}